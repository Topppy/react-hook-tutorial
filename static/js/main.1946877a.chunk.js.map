{"version":3,"sources":["components/Todo/Todo.module.css","components/SwitchLight/index.module.css","views/StateHook.js","views/EffectHook.js","views/Rules.js","views/Home.js","views/CustomHooks.js","components/AddTodo.js","components/SwitchLight/index.js","hooks/useControl.js","components/Todo/index.js","components/TodoList.js","hooks/useTodoState.js","views/TDList.js","views/UseReducer.js","service/api.js","views/StateTable.js","views/StateHookTable.js","model/rank.js","views/ReducerHookTable.js","hooks/useTable.js","views/TableHookTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","iconRight","todo","switch","Counter","_useState","useState","_useState2","Object","slicedToArray","count","setCount","react_default","a","createElement","onClick","default_highlight","language","style","docco","defaultTitle","document","title","EffectHook","useEffect","concat","Rules","_useState3","_useState4","double","setDouble","_useState5","_useState6","three","setThree","href","Home","CustomHooks","AddTodo","_ref","saveTodo","value","setValue","onSubmit","e","preventDefault","placeholder","onChange","event","target","SwitchLight","props","_useControl","initialValue","val","setVal","newVal","type","checked","useControl","console","log","_useControl2","className","s","name","htmlFor","Todo","deleteMe","components_SwitchLight","aria-label","TodoList","todos","deleteTodo","map","components_Todo","key","id","text","useTodoState","setTodos","addTodo","todoText","toConsumableArray","Date","todoId","newTodos","filter","TDList","_useTodoState","components_AddTodo","trimmedText","trim","length","components_TodoList","initialState","reducer","state","action","Error","_useReducer","useReducer","_useReducer2","dispatch","UseReducerHook","UseReducer_Counter","RANK","rank","score","api","getRank","offset","pageSize","Promise","resolve","reject","setTimeout","results","slice","total","columns","dataIndex","width","StateTable","data","pagination","showSizeChanger","loading","handleTableChange","filters","sorter","_this","setState","objectSpread","getRankData","current","this","page","pager","_this$state","Fragment","table","rowKey","record","dataSource","Component","StateHookTable","setData","setPagination","_getRankData","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","sent","stop","apply","arguments","tablePagination","payload","ReducerHookTable","useTable","fetchApi","_useTable","AppRouter","HashRouter","row","col","span","Route","path","exact","component","StateHook","UseReducer","TableHookTable","NavLink","activeClassName","to","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1946877a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"iconRight\":\"Todo_iconRight__38mhE\",\"todo\":\"Todo_todo__3BaU3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch\":\"SwitchLight_switch__3F0Fs\"};","import React, { useState } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/styles/hljs';\n\n\nexport default function Counter() {\n  // Declare a new state variable, which we'll call \"count\"\n  /**\n   * useState returns a pair: the current state value and a function that lets you update it.\n   * userState 返回两个值，一个是当前的state值，另一个是更新state的func\n   */\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <h1>State Hook</h1>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n      <p>源码如下，</p>\n      <SyntaxHighlighter language='javascript' style={docco}>\n        {`\n          import { useState } from 'react';\n\n          function Example() {\n            // Declare a new state variable, which we'll call \"count\"\n            const [count, setCount] = useState(0);\n\n            return (\n              <div>\n                <p>You clicked {count} times</p>\n                <button onClick={() => setCount(count + 1)}>\n                  Click me\n                </button>\n              </div>\n            );\n          }\n        `}\n      </SyntaxHighlighter>\n      介绍：\n      <ul>\n        <li>useState 返回两个值，一个是当前的state值，另一个是更新state的func</li>\n        <li>这个更新state的func与this.setState类似，除了它并不merge旧的state</li>\n        <li>useState只接受一个参数，就是初始state，注意到与this.state不同，这个state可以不是对象（也可以是对象）</li>\n        <li>如果多次调用useState，每次render都会按照你写的seState顺序执行</li>\n        <li>Hooks无法在class组件中使用，只能在function组件中使用</li>\n        <li>Hooks支持自定义</li>\n      </ul>\n      使用：\n      <ul>\n        <li>import useState</li>\n        <li>获取当前state： count，和stateUpdater： setCount，（解构赋值）</li>\n        <li>在jsx中直接使用' count '</li>\n        <li>在click handler中直接使用setCount</li>\n      </ul>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/styles/hljs';\n\nconst defaultTitle = document.title\n\nexport default function EffectHook() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n    return () => {\n      document.title = defaultTitle\n    }\n  });\n\n  return (\n    <div>\n      <h1>Effect Hook</h1>\n      <h3>简单例子</h3>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n      <p>源码如下，</p>\n      <SyntaxHighlighter language='javascript' style={docco}>\n        {`\n          import { useState, useEffect } from 'react';\n          const defaultTitle = document.title\n\n          function Example() {\n            const [count, setCount] = useState(0);\n          \n            // Similar to componentDidMount and componentDidUpdate:\n            useEffect(() => {\n              // Update the document title using the browser API\n              document.title = ${`You clicked $\\{count} times`};\n              // Similar to componentWillUnmount\n              // Specify how to clean up after this effect:\n              return () => {\n                document.title = defaultTitle\n              }\n            });\n          \n            return (\n              <div>\n                <p>You clicked {count} times</p>\n                <button onClick={() => setCount(count + 1)}>\n                  Click me\n                </button>\n              </div>\n            );\n          }\n        `}\n      </SyntaxHighlighter>\n      介绍：\n      <ul>\n        <li>EffectHook给了function组件执行带有副作用操作（称为effects）的能力，eg. 请求数据、订阅、改变DOM</li>\n        <li>EffectHook与Class组件的componentDidMount, componentDidUpdate和 componentWillUnmount的使用场景是类似的</li>\n        <li>EffectHook在每次render后执行，就是说，首次DidMount和更新的DidUpdate时，EffectHook都会执行</li>\n        <li>组件卸载的时候也会经过EffectHook，不过执行的是不再是EffectHook本身，而是EffectHook return的fucntion。</li>\n        <li>EffectHook也可以像StateHook一样在一个组件中Home多次使用</li>\n      </ul>\n      effects分为两种：\n      <ul>\n        <li>不需要clean up的，比如数据请求，改变DOM等，执行完就不用再管了</li>\n        <li>需要clean up的，比如订阅，定时器等，需要在组件变更／销毁的时候清理一下，避免内存泄漏</li>\n      </ul>\n      <h3>不需要清理的Effects</h3>\n      几个引导性问答：\n      <ul>\n        <li>useEffect是干什么用的？</li>\n        <p>使用EffectHook来告诉react在render后执行一些事情，React会保存你传递给useEffect的函数，并在DOM更新之后执行</p>\n        <li>为什么在组件內调用useEffect？</li>\n        <p>可以利用闭包的特性来访问state，props</p>\n        <li>useEffect每次render之后都会执行么？</li>\n        <p>是的。react保证在每次DOM更新后调用useEffect</p>\n      </ul>\n      与componentDidMount, componentDidUpdate的一个关键性差异在于：\n      <ul>\n        <li>useEffect调度的effects不会阻塞浏览器更新，会延迟到浏览器绘制完后执行，响应体验更好</li>\n      </ul>\n      <h3>需要清理的Effects</h3>\n      几个引导性问答\n      <ul>\n        <li>为什么effect要return一个function？</li>\n        <p>这是effects的可选清理机制，每个effect都可以return一个fucntion用来清理自己</p>\n        <li>什么时候React会清理effect的？</li>\n        <p>组件卸载的时候，react会执行清理。</p>\n        <p>然而，上文中提到，react会在每次render的时候都执行effects，而不是只执行一次。</p>\n        <p>因此实际上，react在执行下次effects前也会清理掉上次的effects</p>\n      </ul>\n      <h3>其他</h3>\n      <h4>useEffect与class相比的优势</h4>\n      <ul>\n        <li>useEffect将原本分散在componentDidMount, componentDidUpdate和 componentWillUnmount三个周期內的相关逻辑集中到了一起</li>\n        <li>useEffect将原本混和在同一个周期里的多个互不相关的逻辑，通过多个effects区分开来</li>\n      </ul>\n      <h4>为什么每次更新都要执行effects</h4>\n      <ul>\n        <li>一个class的例子</li>\n        <SyntaxHighlighter language='javascript' style={docco}>\n          {`\n            class FriendStatusWithCounter extends React.Component {\n              constructor(props) {\n                super(props);\n                this.state = { isOnline: null };\n                this.handleStatusChange = this.handleStatusChange.bind(this);\n              }\n            \n              componentDidMount() {\n                ChatAPI.subscribeToFriendStatus(\n                  this.props.friend.id,\n                  this.handleStatusChange\n                );\n              }\n              // 当props的friend.id改变的时候,如果我们不做额外处理（下述代码）\n              // 就会出现依旧订阅的是旧数据的bug\n              componentDidUpdate(prevProps) {\n                // 需要取消订阅旧id\n                ChatAPI.unsubscribeFromFriendStatus(\n                  prevProps.friend.id,\n                  this.handleStatusChange\n                );\n                // 重新订阅新id\n                ChatAPI.subscribeToFriendStatus(\n                  this.props.friend.id,\n                  this.handleStatusChange\n                );\n              }\n            \n              componentWillUnmount() {\n                ChatAPI.unsubscribeFromFriendStatus(\n                  this.props.friend.id,\n                  this.handleStatusChange\n                );\n              }\n            \n              handleStatusChange(status) {\n                this.setState({\n                  isOnline: status.isOnline\n                });\n              }\n              // ...\n          `}\n        </SyntaxHighlighter>\n        <li>如果使用hooks来实现这个需求</li>\n        <SyntaxHighlighter language='javascript' style={docco}>\n          {`\n          function FriendStatusWithCounter(props) {\n            const [isOnline, setIsOnline] = useState(null);\n            useEffect(() => {\n              ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n              return () => {\n                ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n              };\n            });\n          \n            function handleStatusChange(status) {\n              setIsOnline(status.isOnline);\n            }\n            // ...\n          }\n          `}\n        </SyntaxHighlighter>\n        <li>react通过每次都render都执行effects帮我们解决了这个问题，它实际调用如下：</li>\n        <SyntaxHighlighter language='javascript' style={docco}>\n          {`\n            // Mount with { friend: { id: 100 } } props\n            ChatAPI.subscribeToFriendStatus(100, handleStatusChange);     // Run first effect\n            \n            // Update with { friend: { id: 200 } } props\n            ChatAPI.unsubscribeFromFriendStatus(100, handleStatusChange); // Clean up previous effect\n            ChatAPI.subscribeToFriendStatus(200, handleStatusChange);     // Run next effect\n            \n            // Update with { friend: { id: 300 } } props\n            ChatAPI.unsubscribeFromFriendStatus(200, handleStatusChange); // Clean up previous effect\n            ChatAPI.subscribeToFriendStatus(300, handleStatusChange);     // Run next effect\n            \n            // Unmount\n            ChatAPI.unsubscribeFromFriendStatus(300, handleStatusChange); // Clean up last effect\n          `}\n        </SyntaxHighlighter>\n      </ul>\n      <h4>优化</h4>\n      <ul>\n        <li>既然每次render都会执行effects，那么会不会造成性能问题？<br/> \n        在class组件中，我们会比较prevState，prevProps，只在关心的数据变化的时候才执行操作。<br/> \n        useEffect考虑到了这点，并且内置了这个这个功能，你可以主动告诉React在re-render的时候，如果你关心的那个值没有改变，那么本次就跳过执行effects。</li>\n        <li>useEffect支持第二个参数，数组类型，数组元素为我们要优化的那个变量名</li>\n        <SyntaxHighlighter>\n          {`\n            // 简单例子\n            useEffect(() => {\n              document.title = ${`You clicked $\\{count} times`};\n            }, [count]); // Only re-run the effect if count changes\n\n            // 另一个例子\n            useEffect(() => {\n              ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n              return () => {\n                ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n              };\n            }, [props.friend.id]); // Only re-subscribe if props.friend.id changes\n          `}\n        </SyntaxHighlighter>\n        如果只想在mount执行一次effects和unmount的时候执行一次清理，那么第二个参数传递空数组，这个effects不会重复执行。<br/>\n        因此，第二参数传递[]的时候，useEffect会更接近componentDidMount和componentWillUnmount的效果。\n      </ul>\n\n\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/styles/hljs';\n\nexport default function Rules() {\n  const [count, setCount] = useState(0);\n  const [double, setDouble] = useState(0);\n  const [three, setThree] = useState(0);\n\n  return (\n    <div>\n      <h1>Hooks规则：</h1>\n      <p>You clicked +1 button {count} times</p>\n      <p>You clicked +2 button {double} times</p>\n      <p>You clicked +3 button {three} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        +1\n      </button>\n      <button onClick={() => setDouble(double + 1)}>\n        +2\n      </button>\n      <button onClick={() => setThree(three + 1)}>\n        +3\n      </button>\n      <ul>\n        <li>只能在顶级调用Hooks。</li>\n        <p>不能在循环，条件判断，嵌套函数中调用Hooks。确保每次render的时候，hooks都是相同的顺序</p>\n        <li>不能在普通的js函数中调用Hooks</li>\n        <ol>\n          <li>可以在React function组件中调用Hooks。</li>\n          <li>可以在自定义Hooks中调用Hooks。</li>\n        </ol>\n      </ul>\n      官方提供<a href='https://www.npmjs.com/package/eslint-plugin-react-hooks'>linter</a>来校验这些规则\n\n      <h3>为什么Hooks要保证顺序不变？</h3>\n      <p>当一个fucntion组件中有多个Hooks时，React是如何知道每个useState对应的是哪个state？</p>\n      <p>React官方给的答案是：React依赖于Hooks被调用的顺序。当然我看完并没有明白为啥，于是在源码useState函数里打了断点</p>\n      <p>最后定位到react-dom源码的useReducer函数，在该函数中，workInProgressHook是以单链表的方式存放Hooks，React只能按照顺序使用next来逐一执行每个Hook，无法跳过</p>\n      <SyntaxHighlighter language='javascript' style={docco}>\n        {`\n        function useReducer(reducer, initialState, initialAction) {\n          currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();\n          workInProgressHook = createWorkInProgressHook();\n          var queue = workInProgressHook.queue;\n          if (queue !== null) {\n            // Already have a queue, so this is an update.\n            if (isReRender) {\n              // This is a re-render. Apply the new render phase updates to the previous\n              var _dispatch2 = queue.dispatch;\n              if (renderPhaseUpdates !== null) {\n                // Render phase updates are stored in a map of queue -> linked list\n                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n                if (firstRenderPhaseUpdate !== undefined) {\n                  renderPhaseUpdates.delete(queue);\n                  var newState = workInProgressHook.memoizedState;\n                  var update = firstRenderPhaseUpdate;\n                  do {\n                    // Process this render phase update. We don't have to check the\n                    // priority because it will always be the same as the current\n                    // render's.\n                    var _action = update.action;\n                    newState = reducer(newState, _action);\n                    update = update.next;\n                  } while (update !== null);\n        \n                  workInProgressHook.memoizedState = newState;\n        \n                  // Don't persist the state accumlated from the render phase updates to\n                  // the base state unless the queue is empty.\n                  // TODO: Not sure if this is the desired semantics, but it's what we\n                  // do for gDSFP. I can't remember why.\n                  if (workInProgressHook.baseUpdate === queue.last) {\n                    workInProgressHook.baseState = newState;\n                  }\n        \n                  return [newState, _dispatch2];\n                }\n              }\n              return [workInProgressHook.memoizedState, _dispatch2];\n            }\n        \n            // The last update in the entire queue\n            var _last = queue.last;\n            // The last update that is part of the base state.\n            var _baseUpdate = workInProgressHook.baseUpdate;\n        \n            // Find the first unprocessed update.\n            var first = void 0;\n            if (_baseUpdate !== null) {\n              if (_last !== null) {\n                // For the first update, the queue is a circular linked list where\n                // \\`queue.last.next = queue.first\\`. Once the first update commits, and\n                // the \\`baseUpdate\\` is no longer empty, we can unravel the list.\n                _last.next = null;\n              }\n              first = _baseUpdate.next;\n            } else {\n              first = _last !== null ? _last.next : null;\n            }\n            if (first !== null) {\n              var _newState = workInProgressHook.baseState;\n              var newBaseState = null;\n              var newBaseUpdate = null;\n              var prevUpdate = _baseUpdate;\n              var _update = first;\n              var didSkip = false;\n              do {\n                var updateExpirationTime = _update.expirationTime;\n                if (updateExpirationTime < renderExpirationTime) {\n                  // Priority is insufficient. Skip this update. If this is the first\n                  // skipped update, the previous update/state is the new base\n                  // update/state.\n                  if (!didSkip) {\n                    didSkip = true;\n                    newBaseUpdate = prevUpdate;\n                    newBaseState = _newState;\n                  }\n                  // Update the remaining priority in the queue.\n                  if (updateExpirationTime > remainingExpirationTime) {\n                    remainingExpirationTime = updateExpirationTime;\n                  }\n                } else {\n                  // Process this update.\n                  var _action2 = _update.action;\n                  _newState = reducer(_newState, _action2);\n                }\n                prevUpdate = _update;\n                _update = _update.next;\n              } while (_update !== null && _update !== first);\n        \n              if (!didSkip) {\n                newBaseUpdate = prevUpdate;\n                newBaseState = _newState;\n              }\n        \n              workInProgressHook.memoizedState = _newState;\n              workInProgressHook.baseUpdate = newBaseUpdate;\n              workInProgressHook.baseState = newBaseState;\n            }\n        \n            var _dispatch = queue.dispatch;\n            return [workInProgressHook.memoizedState, _dispatch];\n          }\n        \n          // There's no existing queue, so this is the initial render.\n          if (reducer === basicStateReducer) {\n            // Special case for \\`useState\\`.\n            if (typeof initialState === 'function') {\n              initialState = initialState();\n            }\n          } else if (initialAction !== undefined && initialAction !== null) {\n            initialState = reducer(initialState, initialAction);\n          }\n          workInProgressHook.memoizedState = workInProgressHook.baseState = initialState;\n          queue = workInProgressHook.queue = {\n            last: null,\n            dispatch: null\n          };\n          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);\n          return [workInProgressHook.memoizedState, dispatch];\n        }\n        `}\n      </SyntaxHighlighter>\n      <p>那么，如果你需要使用条件判断，可以移到Hooks的effects函数内部</p>\n      <SyntaxHighlighter language='javascript' style={docco}>\n        {`\n         useEffect(function persistForm() {\n          // 👍 We're not breaking the first rule anymore\n          if (name !== '') {\n            localStorage.setItem('formData', name);\n          }\n        });\n        `}\n      </SyntaxHighlighter>\n    </div>\n  );\n}","import React from 'react';\n\nexport default function Home() {\n  return (\n    <div>\n      <h1>React Hooks</h1>\n      <h3>hooks为了解决什么问题？</h3>\n      <p>state逻辑复用</p>\n      <h3>class会完全被替代吗？</h3>\n      <p>也许，但是react并不打算删除掉class。</p>\n\n      <h3>References</h3>\n      <ul>\n        <li>\n          <a href='https://reactjs.org/docs/hooks-intro.html'>\n            React Hooks\n          </a>\n        </li>\n        <li>\n          <a href='https://medium.com/@vcarl/everything-you-need-to-know-about-react-hooks-8f680dfd4349'>\n            Everything you need to know about React Hooks\n          </a>\n        </li>\n        <li>\n          <a href='https://medium.freecodecamp.org/how-to-build-a-todo-list-with-react-hooks-ebaa4e3db3b'>\n          How to Build a Todo List with React Hooks\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n}","import React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\n// import SyntaxHighlighter from 'react-syntax-highlighter';\n// import { docco } from 'react-syntax-highlighter/dist/styles/hljs';\n\nexport default function CustomHooks() {\n\n  return (\n    <div>\n      <h1>自定义 Hook</h1>\n      <p>自定义Hook就是为了让我们可以把组件逻辑抽出来变成可以复用的函数</p>\n      <h3>我们看一个自定义Hook\bs的需求场景：</h3>\n      <SyntaxHighlighter>\n        {`\n          import { useState, useEffect } from 'react';\n\n          function FriendStatus(props) {\n            // 重复代码-start\n            const [isOnline, setIsOnline] = useState(null);\n          \n            function handleStatusChange(status) {\n              setIsOnline(status.isOnline);\n            }\n          \n            useEffect(() => {\n              ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n              return () => {\n                ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n              };\n            });\n            // 重复代码-end\n          \n            if (isOnline === null) {\n              return 'Loading...';\n            }\n            return isOnline ? 'Online' : 'Offline';\n          }\n        `}\n      </SyntaxHighlighter>\n      <p>这段代码实现的逻辑是订阅一个朋友的在线状态数据，改变本组件的state：isOnline</p>\n      <p>如果我们在另一个组件，有类似的需求，用颜色来显示朋友在线状态</p>\n      <SyntaxHighlighter>\n        {`\n          import { useState, useEffect } from 'react';\n\n          function FriendListItem(props) {\n            // 重复代码-start\n            const [isOnline, setIsOnline] = useState(null);\n          \n            function handleStatusChange(status) {\n              setIsOnline(status.isOnline);\n            }\n          \n            useEffect(() => {\n              ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n              return () => {\n                ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n              };\n            });\n            // 重复代码-end\n          \n            return (\n              <li style={{ color: isOnline ? 'green' : 'black' }}>\n                {props.friend.name}\n              </li>\n            );\n          }\n        `}\n      </SyntaxHighlighter>\n      <p>start～end之间都是重复代码，我们最好把这部分抽出来，变成可复用的。<br/>\n        在Hooks出现前，我们有两种可以选择的方案，render props和高阶组件，而Hooks可以实现这个需求的同时，可以避免增加额外的组件。\n      </p>\n      <h3>抽取逻辑做成自定义Hooks</h3>\n      <p>我们在写hooks之前，首先要知道我们要写的是什么，自定义hooks应该长什么样？</p>\n      <p>官方定义：自定义Hook是一个名字以use开头的，可能会调用其他Hooks的js函数。</p>\n      <p>本质就是js函数，ok，坐下，基本操作，这个大家都会写。为什么要以use开头？为了能让你一眼看出来它是一个Hook。</p>\n      <p>我们把上面例子中的重复代码抽出来</p>\n      <SyntaxHighlighter>\n        {`\n          import { useState, useEffect } from 'react';\n\n          function useFriendStatus(friendID) {\n            const [isOnline, setIsOnline] = useState(null);\n          \n            function handleStatusChange(status) {\n              setIsOnline(status.isOnline);\n            }\n          \n            useEffect(() => {\n              ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);\n              return () => {\n                ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);\n              };\n            });\n          \n            return isOnline;\n          }\n        `}\n      </SyntaxHighlighter>\n      <p>是不是没有什么新玩意？我们完全从重复代码里拷贝了逻辑过来。注意：</p>\n      <ul>\n        <li>函数名是use开头</li>\n        <li>参数是我们自定义的</li>\n        <li>并在函数结尾返回了值</li>\n        <li>自定义函数同样要满足Hooks基本法：no条件、循环、嵌套</li>\n      </ul>\n      <h3>使用这个自定义Hook</h3>\n      <SyntaxHighlighter>\n        {`\n          function FriendStatus(props) {\n            // 使用我们的自定义hook\n            const isOnline = useFriendStatus(props.friend.id);\n          \n            if (isOnline === null) {\n              return 'Loading...';\n            }\n            return isOnline ? 'Online' : 'Offline';\n          }\n        `}\n      </SyntaxHighlighter>\n      <SyntaxHighlighter>\n        {`\n          function FriendListItem(props) {\n            // 使用我们的自定义hook\n            const isOnline = useFriendStatus(props.friend.id);\n          \n            return (\n              <li style={{ color: isOnline ? 'green' : 'black' }}>\n                {props.friend.name}\n              </li>\n            );\n          }\n        `}\n      </SyntaxHighlighter>\n      <ul>\n        <li>两个组件并不共享同一个state，互相是隔离的。</li>\n        <li>如何实现state隔离？执行我们的自定义Hook等价于执行了useHook、useEffect，就像我们在StateHooks那节讲过的\n          在同一个组件中多次调用useHook、useEffect，这些states和effects是相互独立的。</li>\n      </ul>\n    </div>\n  );\n}\n","import React, { useState } from 'react'\n\nconst AddTodo = ({saveTodo}) => {\n  const [value, setValue] = useState('');\n  // 这是一个受控表单组件\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault()\n        saveTodo(value)\n        setValue('')\n      }}\n    >\n      <input\n        placeholder=\"Add todo\"\n        onChange={event => {\n          setValue(event.target.value);\n        }}\n        value={value}\n      />\n    </form>\n  )\n}\n\nexport default AddTodo\n","import React from 'react'\nimport s from './index.module.css'\nimport useControl from '../../hooks/useControl'\n\nconst SwitchLight = props => {\n  const [ checked, onChange ] = useControl(false, console.log)\n\n  return (\n    <div className={s.switch}>\n      <input\n        type=\"checkbox\"\n        name=\"toggle\"\n        checked={checked}\n        onChange={onChange}\n      />\n      <label htmlFor=\"toggle\"><i></i></label>\n      <span></span>\n    </div>\n  )\n}\n\nexport default SwitchLight\n","import { useState } from 'react'\n\nexport default (initialValue) => {\n  const [val, setVal] = useState(initialValue)\n\n  return [\n    val,\n    e => {\n      const newVal = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\n      setVal(newVal)\n    }\n  ]\n}\n","import React from 'react'\nimport s from './Todo.module.css'\nimport SwitchLight from '../SwitchLight'\n\nconst Todo = ({todo, deleteMe}) => {\n  return (\n    <div className={s.todo}>\n      <SwitchLight />\n      {todo}\n      <i\n        aria-label=\"Delete\"\n        className={s.iconRight}\n        onClick={deleteMe}\n      >\n      </i>\n    </div>\n  )\n}\n\nexport default Todo\n","import React from 'react'\nimport Todo from './Todo'\n\nconst TodoList = ({ todos, deleteTodo }) => {\n  return (\n    <div>\n      {todos.map((todo) => (\n        <Todo\n          key={todo.id}\n          todo={todo.text}\n          deleteMe={ () => {\n            deleteTodo(todo.id)\n          }}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default TodoList\n","import { useState } from 'react'\n\nexport default initialValue => {\n  const [todos, setTodos] = useState(initialValue)\n\n  return {\n    todos,\n    addTodo: todoText => {\n      setTodos([...todos, {text: todoText, id: +new Date()}])\n    },\n    deleteTodo: todoId => {\n      const newTodos = todos\n        .filter((todo) => todo.id !== todoId)\n\n      setTodos(newTodos)\n    }\n  }\n}\n","import React from 'react'\nimport AddTodo from '../components/AddTodo'\nimport TodoList from '../components/TodoList'\nimport useTodoState from '../hooks/useTodoState'\n\nexport default function TDList() {\n  const {todos, addTodo, deleteTodo} = useTodoState([])\n\n  return (\n    <div>\n      <h1>实现TODO List</h1>\n      <AddTodo\n        saveTodo={ todoText => {\n          const trimmedText = todoText.trim()\n          if (trimmedText.length > 0){\n            addTodo(trimmedText)\n          }\n        }}\n      />\n      <TodoList\n        todos={todos}\n        deleteTodo={deleteTodo}\n      />\n    </div>\n  )\n}","import React, { useReducer } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/styles/hljs';\n\nconst initialState = {count: 0};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return {count: state.count + 1};\n    case 'decrement':\n      return {count: state.count - 1};\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <div>\n      Count: {state.count}\n      <button onClick={() => dispatch({type: 'increment'})}>+</button>\n      <button onClick={() => dispatch({type: 'decrement'})}>-</button>\n    </div>\n  );\n}\n\n//Accepts a reducer of type (state, action) => newState, \n// and returns the current state paired with a dispatch method. \n// (If you’re familiar with Redux, you already know how this works.)\n\nexport default function UseReducerHook() {\n  return (\n    <div>\n      <h1>Use Reducer Hook</h1>\n      介绍：\n      <ul>\n        <li>userReducer这个hook使用起来跟redux很像</li>\n        <li>它接收两个参数，reducer函数和初始值（简单使用）</li>\n        <li>reducer函数的形式类似于\n          <SyntaxHighlighter language='javascript' style={docco}>\n            {`(state, action) => newState`}\n          </SyntaxHighlighter>\n        </li>\n        <li>返回state和dispatch函数</li>\n        <li>state就是数据</li>\n        <li>而dispath是用来触发action的函数，可以传递给子组件，接收形式为\n          <SyntaxHighlighter language='javascript' style={docco}>\n          {`{ type: 'decrement'}`}\n          </SyntaxHighlighter>\n          的参数\n        </li>\n        <li>适合复杂state场景，比如state有多层级数据</li>\n\n      </ul>\n      <Counter/>\n      <p>源码如下，</p>\n      <SyntaxHighlighter language='javascript' style={docco}>\n        {`\n          import React, { useReducer } from 'react';\n\n          // ------------start 类似于redux\n          const initialState = {count: 0};\n\n          function reducer(state, action) {\n            switch (action.type) {\n              case 'increment':\n                return {count: state.count + 1};\n              case 'decrement':\n                return {count: state.count - 1};\n              default:\n                throw new Error();\n            }\n          }\n          // -----------end\n          \n          function Counter() {\n            const [state, dispatch] = useReducer(reducer, initialState);\n            return (\n              <div>\n                Count: {state.count}\n                <button onClick={() => dispatch({type: 'increment'})}>+</button>\n                <button onClick={() => dispatch({type: 'decrement'})}>-</button>\n              </div>\n            );\n          }\n        `}\n      </SyntaxHighlighter>\n    </div>\n  );\n}\n","const RANK = [\n  {\n    rank: 1,\n    score: 1000,\n  },\n  {\n    rank: 2,\n    score: 950,\n  },\n  {\n    rank: 3,\n    score: 900,\n  },\n  {\n    rank: 4,\n    score: 800,\n  },\n  {\n    rank: 5,\n    score: 800,\n  },\n  {\n    rank: 6,\n    score: 700,\n  },\n  {\n    rank: 7,\n    score: 700,\n  },\n  {\n    rank: 8,\n    score: 600,\n  },\n  {\n    rank: 9,\n    score: 600,\n  },\n  {\n    rank: 10,\n    score: 500,\n  },\n  {\n    rank: 11,\n    score: 500,\n  },\n  {\n    rank: 12,\n    score: 400,\n  },\n  {\n    rank: 13,\n    score: 400,\n  },\n  {\n    rank: 14,\n    score: 300,\n  },\n  {\n    rank: 15,\n    score: 200,\n  },\n  {\n    rank: 16,\n    score: 100,\n  },\n  {\n    rank: 17,\n    score: 10,\n  },\n]\n\nconst api = {\n  getRank(offset, pageSize) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve({\n          results: RANK.slice(offset, offset+pageSize),\n          total: 17,\n        })\n      }, 50)\n    })\n  },\n}\n\nexport default api","import React, { Component } from 'react';\nimport { Table } from 'antd';\nimport api from '../service/api';\n\nconst columns = [\n  {\n    title: '排名',\n    dataIndex: 'rank',\n    width: '50%',\n  },\n  {\n    title: '分数',\n    dataIndex: 'score',\n  },\n];\n\nexport default class StateTable extends Component {\n  state = {\n    data: [], // 数据列表\n    pagination: {\n      total: 0, // 数据总条数\n      pageSize: 10, // 每页数量\n      showSizeChanger: true, // 显示pageSize改变按钮\n    },\n    loading: false, // 加载状态\n  };\n\n  componentDidMount() {\n    this.getRankData(1);\n  }\n\n  async getRankData(page) {\n    const { pagination } = this.state;\n    // 数据条数\n    const { pageSize } = pagination;\n    // 数据起始index\n    const offset = (page - 1) * pageSize;\n    // 展示加载ing UI\n    this.setState({ loading: true });\n    // 请求数据\n    const data = await api.getRank(offset, pageSize);\n    // 存到state中\n    this.setState((state, props) => {\n      const pager = { ...state.pagination };\n      pager.total = data.total;\n      return {\n        pagination: pager, // 分页数据\n        data: data.results, // 数据列表\n        loading: false, // 加载状态\n      };\n    });\n  }\n\n  // 翻页事件\n  handleTableChange = (pagination, filters, sorter) => {\n    // 改变数据\n    this.setState(\n      (state, props) => {\n        const pager = { ...state.pagination, ...pagination };\n        return {\n          pagination: pager,\n        };\n      },\n      // state改变成功之后去获取数据\n      () => this.getRankData(pagination.current)\n    );\n  };\n\n  render() {\n    const { data, pagination, loading } = this.state;\n    return (\n      <React.Fragment>\n        <h3>使用class组件实现的表格</h3>\n        <Table\n          columns={columns}\n          rowKey={record => record.id}\n          dataSource={data}\n          pagination={pagination}\n          loading={loading}\n          onChange={this.handleTableChange}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Table } from 'antd';\nimport api from '../service/api';\n\nconst columns = [\n  {\n    title: '排名',\n    dataIndex: 'rank',\n    width: '50%',\n  },\n  {\n    title: '分数',\n    dataIndex: 'score',\n  },\n];\n\nexport default function StateHookTable(props) {\n  // 数据列表\n  const [data, setData] = useState([]);\n  // 分页数据\n  const [pagination, setPagination] = useState({\n    total: 0,  // 数据总条数\n    pageSize: 10,  // 页面显示条数\n    showSizeChanger: true,  // 显示pageSize改变按钮\n    current: 1, // 当前页码\n    loading: false, // 加载状态\n  });\n\n  // 请求数据\n  async function getRankData() {\n    const { pageSize, current } = pagination;\n    const offset = (current - 1) * pageSize;\n    setPagination({\n      ...pagination,\n      loading: true,\n    });\n    const res = await api.getRank(offset, pageSize);\n    setData(res.results);\n    setPagination({\n      ...pagination,\n      total: res.total,\n      loading: false,\n    });\n  }\n\n  // 只有[pagination.pageSize, pagination.current] 改变的时候执行\n  useEffect(() => {\n    getRankData();\n  }, [pagination.pageSize, pagination.current]);\n\n  const handleTableChange = (tablePagination, filters, sorter) => {\n    setPagination({\n      ...pagination,\n      ...tablePagination,\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <h3>使用state hooks实现的表格</h3>\n      <Table\n        columns={columns}\n        rowKey={record => record.id}\n        dataSource={data}\n        pagination={pagination}\n        loading={pagination.loading}\n        onChange={handleTableChange}\n      />\n    </React.Fragment>\n  );\n}\n\n","export const initialState = {\n  data: [],\n  pagination: {\n    total: 0,\n    pageSize: 10,\n    showSizeChanger: true,\n    current: 1,\n  },\n  loading: false,\n};\n\nexport function reducer(state, action) {\n  switch (action.type) {\n    case 'setRank':\n      return {\n        ...state,\n        data: action.results,\n        pagination: {\n          ...state.pagination,\n          total: action.total,\n        },\n        loading: false,\n      };\n    case 'startLoading':\n      return {\n        ...state,\n        loading: true,\n      };\n    case 'changePage':\n      return {\n        ...state,\n        pagination: {\n          ...state.pagination,\n          ...action.payload,\n        },\n      };\n    default:\n      throw new Error();\n  }\n}","import React, { useEffect, useReducer } from 'react';\nimport { Table } from 'antd';\nimport api from '../service/api';\nimport { reducer, initialState } from '../model/rank';\n\nconst columns = [\n  {\n    title: '排名',\n    dataIndex: 'rank',\n    width: '50%',\n  },\n  {\n    title: '分数',\n    dataIndex: 'score',\n  },\n];\n\nexport default function ReducerHookTable(props) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const { data, loading, pagination } = state;\n\n  async function getRankData() {\n    const { pageSize, current } = pagination;\n    const offset = (current - 1) * pageSize;\n    dispatch({ type: 'startLoading' });\n    const res = await api.getRank(offset, pageSize);\n    dispatch({\n      type: 'setRank',\n      ...res,\n    });\n  }\n\n  useEffect(() => {\n    getRankData();\n  }, [pagination.pageSize, pagination.current]);\n\n  const handleTableChange = (tablePagination, filters, sorter) => {\n    dispatch({\n      type: 'changePage',\n      payload: tablePagination,\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <h3>使用reducer hooks实现的表格</h3>\n      <Table\n        columns={columns}\n        rowKey={record => record.id}\n        dataSource={data}\n        pagination={pagination}\n        loading={loading}\n        onChange={handleTableChange}\n      />\n    </React.Fragment>\n  );\n}","import { useState, useEffect } from 'react'\nimport api from '../service/api';\n\nexport default (fetchApi) => {\n  // 数据列表\n  const [data, setData] = useState([]);\n  // 分页数据\n  const [pagination, setPagination] = useState({\n    total: 0,  // 数据总条数\n    pageSize: 10,  // 页面显示条数\n    showSizeChanger: true,  // 显示pageSize改变按钮\n    current: 1, // 当前页码\n    loading: false, // 加载状态\n  });\n\n  // 请求数据\n  async function getRankData() {\n    const { pageSize, current } = pagination;\n    const offset = (current - 1) * pageSize;\n    setPagination({\n      ...pagination,\n      loading: true,\n    });\n    const res = await api[fetchApi](offset, pageSize);\n    setData(res.results);\n    setPagination({\n      ...pagination,\n      total: res.total,\n      loading: false,\n    });\n  }\n\n  // 只有[pagination.pageSize, pagination.current] 改变的时候执行\n  useEffect(() => {\n    getRankData();\n  }, [pagination.pageSize, pagination.current]);\n\n  const handleTableChange = (tablePagination, filters, sorter) => {\n    setPagination({\n      ...pagination,\n      ...tablePagination,\n    });\n  };\n\n  return {\n    data,\n    pagination,\n    handleTableChange\n  }\n}\n","import React from 'react';\nimport { Table } from 'antd';\nimport useTable from '../hooks/useTable'\n\nconst columns = [\n  {\n    title: '排名',\n    dataIndex: 'rank',\n    width: '50%',\n  },\n  {\n    title: '分数',\n    dataIndex: 'score',\n  },\n];\n\nexport default function StateHookTable(props) {\n  const {\n    data,\n    pagination,\n    handleTableChange\n  } = useTable('getRank');\n\n  return (\n    <React.Fragment>\n      <h3>使用自定义table hooks实现的表格</h3>\n      <Table\n        columns={columns}\n        rowKey={record => record.id}\n        dataSource={data}\n        pagination={pagination}\n        loading={pagination.loading}\n        onChange={handleTableChange}\n      />\n    </React.Fragment>\n  );\n}\n\n","import './App.css';\nimport React from \"react\";\nimport { HashRouter as Router, Route, NavLink } from \"react-router-dom\";\nimport { Row, Col } from 'antd';\nimport StateHook from './views/StateHook';\nimport EffectHook from './views/EffectHook';\nimport Rules from './views/Rules';\nimport Home from './views/Home';\nimport CustomHooks from './views/CustomHooks';\n// import Play from './views/Play';\nimport TDList from './views/TDList';\nimport UseReducer from './views/UseReducer';\nimport StateTable from './views/StateTable';\nimport StateHookTable from './views/StateHookTable';\nimport ReducerHookTable from './views/ReducerHookTable';\nimport TableHookTable from './views/TableHookTable';\n\nconst AppRouter = () => (\n  <Router >\n    <div className='App'>\n      <Row>\n        <Col span={18}>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/state-hook/\" component={StateHook} />\n          <Route path=\"/effect-hook/\" component={EffectHook} />\n          <Route path=\"/rules/\" component={Rules} />\n          <Route path=\"/custom-hooks/\" component={CustomHooks} />\n          <Route path=\"/todo-list/\" component={TDList} />\n          <Route path=\"/reducer-hook/\" component={UseReducer} />\n          <Route path=\"/table/\" component={StateTable} />\n          <Route path=\"/state-hook-table/\" component={StateHookTable} />\n          <Route path=\"/reducer-hook-table/\" component={ReducerHookTable} />\n          <Route path=\"/table-hook-table/\" component={TableHookTable} />\n        </Col>\n        <Col span={6}>\n          <nav>\n            <ul>\n              <li>\n                <NavLink activeClassName='active'  exact to=\"/\">Home</NavLink>\n              </li>\n              <li>\n                <NavLink to=\"/state-hook/\">State Hook</NavLink>\n              </li>\n              <li>\n                <NavLink to=\"/effect-hook/\">Effect Hook</NavLink>\n              </li>\n              <li>\n                <NavLink to=\"/rules/\">Hooks规则</NavLink>\n              </li>\n              <li>\n                <NavLink to=\"/custom-hooks/\">自定义Hooks</NavLink>\n              </li>\n              <li>\n                <NavLink to=\"/todo-list/\">实现TODO List</NavLink>\n              </li>\n              <li>\n                <NavLink to=\"/reducer-hook/\">Reducer Hook</NavLink>\n              </li>\n              <li>\n                <NavLink to=\"/table/\">state表格实例</NavLink>\n              </li>\n              <li>\n                <NavLink to=\"/state-hook-table/\">State Hook表格实例</NavLink>\n              </li>\n              <li>\n                <NavLink to=\"/reducer-hook-table/\">Reducer Hook表格实例</NavLink>\n              </li>\n              <li>\n                <NavLink to=\"/table-hook-table/\">自定义Table Hook表格实例</NavLink>\n              </li>\n            </ul>\n          </nav>\n        </Col>\n      </Row>\n    </div>\n  </Router>\n);\n\nexport default AppRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}